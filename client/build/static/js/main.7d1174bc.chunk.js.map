{"version":3,"sources":["components/Form.jsx","components/DisplayUsers.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","state","name","position","company","handleChange","e","target","value","_this","setState","Object","defineProperty","submit","preventDefault","_this$state","axios","url","method","data","then","response","props","addUser","catch","alert","react_default","a","createElement","className","autoComplete","onSubmit","this","index_es","id","label","onChange","variant","color","onClick","Component","isEmpty","require","DisplayUser","allUsers","users","align","map","_ref","key","component","scope","App","componentDidMount","fetchUsers","get","concat","toConsumableArray","components_Form","DisplayUsers","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d1174bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport axios from 'axios';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    position: '',\n    company: ''\n  };\n\n  handleChange = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({ [name]: value });\n  };\n\n  submit = e => {\n    e.preventDefault();\n    const { name, position, company } = this.state;\n    axios({\n      url: '/add',\n      method: 'POST',\n      data: {\n        name,\n        position,\n        company\n      }\n    })\n      .then((response) => {\n        this.props.addUser(response.data);\n        this.setState({\n          name: '',\n          company: '',\n          position: ''\n        });\n      })\n      .catch(() => alert('Failed uploading data'))\n  };\n  render() {\n    return (\n      <form className=\"form noValidate\" autoComplete=\"off\" onSubmit={this.submit}>\n        <h2>Tell us about you</h2>\n        <TextField\n          id=\"standard-dense\"\n          value={this.state.name}\n          label=\"Name\"\n          name=\"name\"\n          onChange={this.handleChange}\n        />\n\n        <TextField\n          name=\"company\"\n          value={this.state.company}\n          id=\"standard-dense\"\n          onChange={this.handleChange}\n          label=\"Company\"\n        />\n\n        <TextField\n          name=\"position\"\n          value={this.state.position}\n          id=\"standard-dense\"\n          onChange={this.handleChange}\n          label=\"Position\"\n        />\n\n        <Button variant=\"contained\" color=\"primary\" onClick={this.submit}> Submit </Button>\n\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\n\nconst { isEmpty } = require('lodash');\n\n\n\nclass DisplayUser extends Component {\n    render() {\n        const allUsers = this.props.users;\n        const users = !isEmpty(allUsers) ? allUsers : [];\n\n        return (\n            <div className=\"users\">\n                {!isEmpty(users) ? <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell align=\"right\">Company</TableCell>\n                            <TableCell align=\"right\">Position</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {users.map(({ name, position, company }, key) => (\n                            <TableRow key={key}>\n                                <TableCell component=\"th\" scope=\"row\"> {name ? name : 'No Name Found'} </TableCell>\n                                <TableCell align=\"right\">{company ? company : 'No Company Found'}</TableCell>\n                                <TableCell align=\"right\">{position ? position : 'No Position Found'}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table> : null}\n            </div>\n        );\n    }\n}\n\nexport default DisplayUser;\n","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport DisplayUsers from './components/DisplayUsers';\nimport axios from 'axios';\nimport './App.css';\nclass App extends Component {\n  state = {\n    users: []\n  }\n\n  componentDidMount = () => {\n    this.fetchUsers();\n  };\n\n  fetchUsers = () => {\n    axios.get('/users')\n      .then((response) => {\n        const { users } = response.data;\n        this.setState({ users: [...this.state.users, ...users] })\n      })\n      .catch(() => alert('Error fetching new users'));\n  };\n\n\n  addUser = ({ name, position, company }) => {\n    this.setState({\n      users: [...this.state.users, { name, position, company }]\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form addUser={this.addUser}/>\n        < DisplayUsers users={this.state.users} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}